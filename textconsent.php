<?php
session_start();
$datetime = new DateTime("now", new DateTimeZone('US/Eastern'));
$datetime2 = new DateTime("now", new DateTimeZone('US/Eastern'));


if (!isset($_SESSION['username']))
{
   require_once ('includes/login_functions.inc.php');
   $url = absolute_url();
   header("Location: $url");
   exit();
}
else
{
    $sw = $_SESSION['w']*.75;
    $sw2 = $_SESSION['w']*.2;
echo'
<head>
<title>Providence Anesthesiology</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="styles/style2.css" type="text/css">
<style>
#sketchpadapp {
    /* Prevent nearby text being highlighted when accidentally dragging mouse outside confines of the canvas */
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}
.leftside {
    float:left;
    width:220px;
    height:150px;
    background-color:#def;
    padding:10px;
    border-radius:4px;
}
.rightside {
    float:left;
    margin-left:10px;
}
#sketchpad {
    float:left;
    height:150px;
    width:'.$sw.'px;
    border:2px solid #888;
    border-radius:4px;
    position:relative; /* Necessary for correct mouse co-ords in Firefox */
}
#clearbutton {
    font-size: 15px;
    padding: 10px;
    -webkit-appearance: none;
    background: #eee;
    border: 1px solid #888;
}
</style>
</head>
<body onload="init()"> 
<script type="text/javascript">    

var resizeTimer; 
var cachedWidth = window.innerWidth;

window.addEventListener("resize", doOnResize); 

function doOnResize()
{
    clearTimeout(resizeTimer);
    var new_width = window.innerWidth;
    if(new_width !== cachedWidth)
    {
        resizeTimer = setTimeout(function() 
        {
            var new_width = window.innerWidth;
            var new_height = window.innerHeight;
            window.location = "resetWidth3.php?w=" + new_width + "&h=" + new_height;            
        }, 500);
    }
}
</script>';


echo'
<html>
<title>Consent</title>
<body>

<div class="row2" style="background-color:#7db4dc; width:'.$_SESSION['w'].'">
  <center><img src="includes/ProvidenceSmall.png" alt="PAA" height='.($_SESSION['w']*0.2369*.5*.7).'; width='.($_SESSION['w']*.5*.7).';" /></center>
</div>

    <br><br>
    <center><h1>AUTHORIZATION TO SEND TEXT MESSAGES AND/OR PUSH NOTIFICATIONS</h1></center>
    <br><br>
    <div class="bodytext">
    By signing this form, I authorize <b>Providence Anesthesiology Associates, PA (PAA, PA)</b> to send text messages to my cell phone and/or push 
    notifications to the <i><b>PAA, PA Mobile Application</b></i> on my cell phone for nerve block follow-up.  I understand these texts and/or push 
    notifications will only be sent to let me know when to give feedback and get information about my nerve block.  <br><br>
    I understand these notifications will only be sent during the immediate postoperative period not lasting more than four days from the day of my 
    operation.   <br><br>
    I also understand that standard text messaging rates will apply to any messages received from PAA, PA.  I know that I or PAA, PA may revoke 
    this permission in writing at anytime.  I agree not to hold PAA, PA liable for any electronic messaging charges or fees generated by this service.  
    I understand none of my information will be shared with anyone other than my caregivers at PAA, PA.  None of my information will be sold or otherwise distributed.
    </div>
    <br><br>
    ';


    echo'
    <svg height="10" width="'.$_SESSION['w'].'">
    <line x1="'.$_SESSION['w']*.15.'" y1="0" x2="'.$_SESSION['w']*.85.'" y2="0" style="stroke:#7db4dc;stroke-width:10" />
    </svg>
    <br><br>
    <form name=\'save_remote\' id=\'save_remote\' method=\'POST\' action=\'saveimage.php\' onsubmit=\'saveImageRemote(canvas); return false;\'>
    <h1><center>Do you consent to being contacted by text messaging and/or push notifications as described above?</center></h1>
    <br>
     <table style=width:100%; margin-right:auto; margin-left:auto">
            <tr>

                <td style="border:none; width:25%">
                </td>
                
                <td style="border:none; width:25%;">

                <table style="border-style:solid; margin-right:auto; margin-left:auto;">
                <tr>
                <td>
		<label class="control control-checkbox">
                 Yes
                 <input type="checkbox" id="texty" name="textpush" value="1"/>
                    <div class="control_indicator"></div>
                </label>
                </td>
                </tr>
                </table>
                
                </td>
                
                <td style="border:none; width:25%;">
                
                <table style="border-style:solid; margin-right:auto; margin-left:auto;">
                <tr>
                <td>
		<label class="control control-checkbox">
                 No
                 <input type="checkbox" id="textn" name="textpush" value="0"/>
                    <div class="control_indicator"></div>
                </label>
                </td>
                </tr>
                </table>

                </td>
                
                <td style="border:none; width:25%">
                </td>
                
            </tr>
    </table>
    <br>';


echo'
    <script type="text/javascript">
    function clickYes() {
        if (document.getElementById("textn").checked) {
                        document.getElementById("textn").checked = false;
        }
    }

    function clickNo() {
        if (document.getElementById("texty").checked) {
                        document.getElementById("texty").checked = false;
        }
    }

    document.getElementById("texty").onchange = clickYes;
    document.getElementById("textn").onchange = clickNo;
    </script>';

?>
<script type="text/javascript">
    // Variables for referencing the canvas and 2dcanvas context
    var canvas,ctx;

    // Variables to keep track of the mouse position and left-button status 
    var mouseX,mouseY,mouseDown=0;

    // Variables to keep track of the touch position
    var touchX,touchY;

    // Keep track of the old/last position when drawing a line
    // We set it to -1 at the start to indicate that we don't have a good value for it yet
    var lastX,lastY=-1;

    // Draws a line between the specified position on the supplied canvas name
    // Parameters are: A canvas context, the x position, the y position, the size of the dot
    function drawLine(ctx,x,y,size) {

        // If lastX is not set, set lastX and lastY to the current position 
        if (lastX==-1) {
            lastX=x;
	    lastY=y;
        }

        // Let's use black by setting RGB values to 0, and 255 alpha (completely opaque)
        r=0; g=0; b=0; a=255;

        // Select a fill style
        ctx.strokeStyle = "rgba("+r+","+g+","+b+","+(a/255)+")";

        // Set the line "cap" style to round, so lines at different angles can join into each other
        ctx.lineCap = "round";
        //ctx.lineJoin = "round";


        // Draw a filled line
        ctx.beginPath();

	// First, move to the old (previous) position
	ctx.moveTo(lastX,lastY);

	// Now draw a line to the current touch/pointer position
	ctx.lineTo(x,y);

        // Set the line thickness and draw the line
        ctx.lineWidth = size;
        ctx.stroke();

        ctx.closePath();

	// Update the last position to reference the current position
	lastX=x;
	lastY=y;
    } 

    // Clear the canvas context using the canvas width and height
    function clearCanvas(canvas,ctx) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    // Keep track of the mouse button being pressed and draw a dot at current location
    function sketchpad_mouseDown() {
        mouseDown=1;
        drawLine(ctx,mouseX,mouseY,12);
    }

    // Keep track of the mouse button being released
    function sketchpad_mouseUp() {
        mouseDown=0;

        // Reset lastX and lastY to -1 to indicate that they are now invalid, since we have lifted the "pen"
        lastX=-1;
        lastY=-1;
    }

    // Keep track of the mouse position and draw a dot if mouse button is currently pressed
    function sketchpad_mouseMove(e) { 
        // Update the mouse co-ordinates when moved
        getMousePos(e);

        // Draw a dot if the mouse button is currently being pressed
        if (mouseDown==1) {
            drawLine(ctx,mouseX,mouseY,12);
        }
    }

    // Get the current mouse position relative to the top-left of the canvas
    function getMousePos(e) {
        if (!e)
            var e = event;

        if (e.offsetX) {
            mouseX = e.offsetX;
            mouseY = e.offsetY;
        }
        else if (e.layerX) {
            mouseX = e.layerX;
            mouseY = e.layerY;
        }
     }

    // Draw something when a touch start is detected
    function sketchpad_touchStart() {
        // Update the touch co-ordinates
        getTouchPos();

        drawLine(ctx,touchX,touchY,12);

        // Prevents an additional mousedown event being triggered
        event.preventDefault();
    }

    function sketchpad_touchEnd() {
        // Reset lastX and lastY to -1 to indicate that they are now invalid, since we have lifted the "pen"
        lastX=-1;
        lastY=-1;
    }

    // Draw something and prevent the default scrolling when touch movement is detected
    function sketchpad_touchMove(e) { 
        // Update the touch co-ordinates
        getTouchPos(e);

        // During a touchmove event, unlike a mousemove event, we don't need to check if the touch is engaged, since there will always be contact with the screen by definition.
        drawLine(ctx,touchX,touchY,12); 

        // Prevent a scrolling action as a result of this touchmove triggering.
        event.preventDefault();
    }

    // Get the touch position relative to the top-left of the canvas
    // When we get the raw values of pageX and pageY below, they take into account the scrolling on the page
    // but not the position relative to our target div. We'll adjust them using "target.offsetLeft" and
    // "target.offsetTop" to get the correct values in relation to the top left of the canvas.
    function getTouchPos(e) {
        if (!e)
            var e = event;

        if(e.touches) {
            if (e.touches.length == 1) { // Only deal with one finger
                var touch = e.touches[0]; // Get the information for finger #1
                touchX=touch.pageX-touch.target.offsetLeft;
                touchY=touch.pageY-touch.target.offsetTop;
            }
        }
    }
    
    function saveImageRemote(canvas) {
        var image_data = canvas.toDataURL("image/png");
	document.getElementById('save_remote_data').value = image_data; // Place the image data in to the form
	document.forms["save_remote"].submit(); // Submit the form to the server
    }



    // Set-up the canvas and add our event handlers after the page has loaded
    function init() {
        // Get the specific canvas element from the HTML document
        canvas = document.getElementById('sketchpad');

        // If the browser supports the canvas tag, get the 2d drawing context for this canvas
        if (canvas.getContext)
            ctx = canvas.getContext('2d');

        // Check that we have a valid context to draw on/with before adding event handlers
        if (ctx) {
            // React to mouse events on the canvas, and mouseup on the entire document
            canvas.addEventListener('mousedown', sketchpad_mouseDown, false);
            canvas.addEventListener('mousemove', sketchpad_mouseMove, false);
            window.addEventListener('mouseup', sketchpad_mouseUp, false);

            // React to touch events on the canvas
            canvas.addEventListener('touchstart', sketchpad_touchStart, false);
            canvas.addEventListener('touchend', sketchpad_touchEnd, false);
            canvas.addEventListener('touchmove', sketchpad_touchMove, false);
        }
    }
</script>

<div id="sketchpadapp" style="padding:10px">
        <div class="leftside">
            Confirm by signing in the box:<br/><br/>
            <input type="submit" value="Clear Signature" id="clearbutton" onclick="clearCanvas(canvas,ctx);">
            <br>
            
            
        </div>
        <div class="rightside">
<?php
echo'
            <canvas id="sketchpad" height="150" width="'.$sw.'">
            </canvas>
        </div>
    </div>
    <br><br>
    <table style="width:100%">
        <tr>
            <td align="center">
    <input class="btn" type="submit" value="SUBMIT" id="save_button">
    <input type="hidden" name="save_remote_data" id="save_remote_data">
            </td>
        </tr>
    </table>
    </form>';
}
?>